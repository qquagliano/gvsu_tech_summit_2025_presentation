[
  {
    "objectID": "presentation/presentation.html#sec-follow-along",
    "href": "presentation/presentation.html#sec-follow-along",
    "title": "When and How to Introduce Students to Free and Open-Source Software",
    "section": "1.1 Follow Along!",
    "text": "1.1 Follow Along!\nSee the link to presentation handout on Tech Summit Website!: www4.gvsu.edu/gvtechsummit"
  },
  {
    "objectID": "presentation/presentation.html#sec-disclosures",
    "href": "presentation/presentation.html#sec-disclosures",
    "title": "When and How to Introduce Students to Free and Open-Source Software",
    "section": "1.2 Disclosures and Disclaimers",
    "text": "1.2 Disclosures and Disclaimers\n\nNo AI-based tools have been used in the creation and writing of this presentation\nI have no disclosures or conflicts-of-interests related to this presentation or the software described in it\nI am not a software engineer, computer scientist, or other technology-oriented professional by training - but I am an enthusiast, hobbyist, and advocate!"
  },
  {
    "objectID": "presentation/presentation.html#sec-learning-objs",
    "href": "presentation/presentation.html#sec-learning-objs",
    "title": "When and How to Introduce Students to Free and Open-Source Software",
    "section": "1.3 Learning Objectives",
    "text": "1.3 Learning Objectives\n\nListeners should appreciate why we, and our students, should pay attention to how software is published and priced (Sections: Motivation and Purpose)\nListeners should understand the vocabulary used to describe pricing models and source code availability in software (Section: Vocabulary of Software Availability and Pricing)\nListeners should be able to identify reasonable open-source alternatives to popular and proprietary tools used in their area of work (Section: How to Find Alternative and Open-source Tools)\nListeners should learn about some practical implementation examples to bring more diverse software to students in class (Section: Examples of Integration)\nListeners should recognize both the advantages and disadvantages of adopting open-source alternatives into instruction (Section: Throughout Examples of Integration)"
  },
  {
    "objectID": "presentation/presentation.html#sec-motivation",
    "href": "presentation/presentation.html#sec-motivation",
    "title": "When and How to Introduce Students to Free and Open-Source Software",
    "section": "1.4 Motivation",
    "text": "1.4 Motivation\n\nThe four (hyperbolic) “Evil” Es of software\n\nSoftware is everywhere - it’s always all around us\nSoftware is essential - it’s a common requirement of navigating the world\nSoftware is elaborate - but it doesn’t look it!\nSoftware is expensive - and keeps getting more so!\n\nI want my students able to responsibly navigate these “Evil Es” during and after college, and not feel lost when they encounter new technology"
  },
  {
    "objectID": "presentation/presentation.html#sec-purpose",
    "href": "presentation/presentation.html#sec-purpose",
    "title": "When and How to Introduce Students to Free and Open-Source Software",
    "section": "1.5 Purpose",
    "text": "1.5 Purpose\n\nSupport the liberal arts mission of creating well-(tech)-rounded students\n\nExpose students to more alternative tools\nHelp students see the similarities, differences, and quirks of each tool\nEnsure that when students encounter new software they can adapt easier\n\nSupport projects and software that are free in a time of increasing prices\n\nPush back against reliance upon subscription-based and more “locked-down” tools\nShow students how to build their portfolio and skill set without incurring additional financial burden\nMake sure that college education does not rely upon the solvency of software businesses and startups - students should leave with the flexibility necessary to outlast individual products!\n\n\nImportant: This is **not** an attempt to insist upon **only** using open-source software"
  },
  {
    "objectID": "presentation/presentation.html#sec-basic-software-terms",
    "href": "presentation/presentation.html#sec-basic-software-terms",
    "title": "When and How to Introduce Students to Free and Open-Source Software",
    "section": "2.1 Basic Software Terms",
    "text": "2.1 Basic Software Terms\n\nDeveloper(s): The creator(s) and maintainer(s) of a certain piece of software, may be a somewhat unorganized group of like-minded people or a centralized corporation\nEnd User: A person who uses a certain piece of software for personal or business use, i.e., You and I\nLicense: Some document or text shared with software, written by the developer(s), that dictates how a certain software, and its source code, can or cannot be used, modified, and shared\n\nWhen used correctly, this is legally binding and ignoring license terms can be grounds for lawsuits\nE.g., MIT License, CC, specific licenses written for proprietary software\n\nEnd User License Agreement (EULA): An agreement signed by a end user of a specific software that recognizes and agrees to the software license terms set by the developer, and the penalties associated with violating the license\n\nI.e., the long set of documents and text we agree to when we sign up for a new service\n\nSource code: the actual code that underlies a certain software or program\n\nThis is not necessarily the files that “ship” with the software\nThis is used to build and modify the program, and in “closed-source” software, is only available to the developer(s)"
  },
  {
    "objectID": "presentation/presentation.html#sec-terms-of-ownership-and-use",
    "href": "presentation/presentation.html#sec-terms-of-ownership-and-use",
    "title": "When and How to Introduce Students to Free and Open-Source Software",
    "section": "2.2 Terms of Ownership and Use",
    "text": "2.2 Terms of Ownership and Use\nNon-free Software\n\nSoftware that is restricted with limited or no access to source code. Contrary to the name, it does not necessarily have a cost to use\n\nProprietary: A type of non-free software; Something that is owned by developer(s) via copyright and intellectual property laws, and end users are not allowed to make limitless modification to the program or share without authorization\n\nE.g., Microsoft 365 (Word, Powerpoint, etc.) - owned by Microsoft, cannot be modified or shared without permission from copyright holder\n\nSoftware as a Service (SaaS): Proprietary, non-free software priced as a continuous ongoing subscription model, rather than charging a one-time access fee\n\nE.g., Adobe Creative Cloud, likely anything that says: “Contact our Sales Team”\n\n\n\nFree and Open Source Software (FOSS)\n\nSoftware that is intentionally not priced, and able to be adopted, modified, shared, and used without cost - with only some restrictions per the specific license of the software\n\nThe “open source” part of this, refers to the source code being open and available, i.e., not hidden from the public\nA subtype of this is Free, libre, and open source (FLOSS) or copyleft, which focuses on prohibiting the use of the software to create non-free software\n\nFor the purpose of this presentation, I’ll be prioritizing talking about options for using and embracing FOSS software\n\nImportant: There's a lot of different ways to describe software price models, and sometimes a lot of grey area too - so be discerning when looking at options!"
  },
  {
    "objectID": "presentation/presentation.html#sec-strategy",
    "href": "presentation/presentation.html#sec-strategy",
    "title": "When and How to Introduce Students to Free and Open-Source Software",
    "section": "3.1 Strategy",
    "text": "3.1 Strategy\n\nIdentify which programs and software are “industry-standard” in your field of study/teaching and which programs you would normally suggest/have students use for assignments in the classes you instruct\nFor each of those identified programs, list what core features they have that your students should have in any alternative program, i.e., what parts of those programs are necessary to achieve the desired learning objectives and complete assignments\nUse these websites to help find similar programs to those you already use:\n\n\nAlternativeTo\nSourceForge\nGoogle - search “Open-source alternative to [insert proprietary program name here]”\nAI chats and tools can help too - just be wary of hallucinations!\nSurprisingly, internet forums like Reddit can also be useful to check!\n\n\nTry out alternatives and see if they match your needs - you want to make sure that it works well enough so you would feel comfortable with your students using it!"
  },
  {
    "objectID": "presentation/presentation.html#sec-things-to-look-for",
    "href": "presentation/presentation.html#sec-things-to-look-for",
    "title": "When and How to Introduce Students to Free and Open-Source Software",
    "section": "3.2 Things to Look for in Software",
    "text": "3.2 Things to Look for in Software\n\nHere is some general guidance of things to look when considering whether software seems to be legit and well-supported\nUse the Vocabulary of Software Availability and Pricing to help cut through the marketing, jargon, and fluff!\n\nGreen Flags\n\nSupported by community involvement/discussion and code contributions\nRecent activity, updates, and contributions\nSource code publicly available and easily find-able\nSupported by voluntary donations ONLY, with no features gated by default\nBacked by non-profit\n\nRed Flags\n\nProminent advertising for subscription tiers, “membership”, or overbearing donation suggestions, “Contact sales”, “free trial”\nDifficult to find source code\nUn-maintained, out-of-date code repositories\nLow or nonexistent community discussion or involvement"
  },
  {
    "objectID": "presentation/presentation.html#sec-common-examples",
    "href": "presentation/presentation.html#sec-common-examples",
    "title": "When and How to Introduce Students to Free and Open-Source Software",
    "section": "3.3 Common Alternative Examples",
    "text": "3.3 Common Alternative Examples\n\nI don’t guarantee that the following suggestions are all of the same skill level, some may require some time investment to re-learn\nMicrosoft / Google Suite for offline document, sheets, and slideshow preparation \\(\\rightarrow\\) LibreOffice, Apache OpenOffice\n\nFor this presentation, I’m using RevealJS, written with Quarto, as an alternative to using MS Powerpoint\n\nGithub for code sharing, version control, other code actions \\(\\rightarrow\\) Codeberg, Gitlab, Gitea\nChatgpt / Gemini / Other AI chats for generic LLM use \\(\\rightarrow\\) Ollama\n\nI greatly prefer this option for privacy reasons as well\n\nSPSS / SAS / STATA for statistics \\(\\rightarrow\\) R, Python\nSome Adobe programs like Photoshop and Illustrator \\(\\rightarrow\\) GIMP, Inkscape\nPanopto for video / screen recording \\(\\rightarrow\\) Open Broadcaster Software (OBS)\n\nI use this for recording all of my lectures\n\n\nImportant: Trying to find a real, legit, useful, and feature-rich alternative can be a minefield! Take your time to parse out the best solutions, but there isn't always one!"
  },
  {
    "objectID": "presentation/presentation.html#sec-general-advice",
    "href": "presentation/presentation.html#sec-general-advice",
    "title": "When and How to Introduce Students to Free and Open-Source Software",
    "section": "4.1 General Advice",
    "text": "4.1 General Advice\n\nTake the below with a grain-of-salt; you may have to do a little or a lot of modifications to these to make them make sense for your classes\nRealistically, not all classes may benefit from addition of software related/assisted instruction - add in relevant activities as appropriate to your learning objectives"
  },
  {
    "objectID": "presentation/presentation.html#sec-two-ways",
    "href": "presentation/presentation.html#sec-two-ways",
    "title": "When and How to Introduce Students to Free and Open-Source Software",
    "section": "4.2 Option 1: A Longer Assignment with a Choice of Two (or More) Ways",
    "text": "4.2 Option 1: A Longer Assignment with a Choice of Two (or More) Ways\nSteps\n\nThink of an assignment you already give to your class in which you recommend/suggest/require a proprietary software\nRewrite assignment instruction to allow for use of the proprietary or the open-source software alternative (make sure you vet the open source alternative first and make sure it is reasonably close in difficulty!), but keep outcome expectations / grading standards roughly the same\nIf one of the choices presents a greater learner curve or challenge, consider offering some marginal extra points for use of the more difficult tool\n\nPresenter Example\n\nI have students run a brief, practical statistical analysis using SPSS (proprietary) or R (FOSS).\nFor both options I:\n\nProvide a video and written guide on how to perform the essential skills for the assignment\nDemonstrate equivalency of outcomes between the two programs, e.g., I show a t-test result is the same between both of the programs\nIt’s important that you make it clear that both pieces of software offer a reasonable way to accomplish the same task\n\nFor either option, students must:\n\nShow output sceenshot from the program of their choice\nProduce the same outcome in quality of work, regardless of program choice\n\nDepending on complexity of assignment, I may offer a small amount of extra points for use of R, due to it generally requiring a higher learning curve.\n\nBenefits\n\nGives agency for students to choose which path they would like to take, allows for students to pursue the option they feel is more valuable / attainable\nIdeally, students demonstrate same skills and accomplish same learning outcomes, regardless of chosen option\nDemonstrates instructor ability / competence, show your own ability to accomplish the work, model problem solving behavior across multiple modalities\n\nDrawbacks\n\nAdditional work for instructor to prepare guidance and instructions for two different programs\nStudents may chose the perceived “easier” option - that is why it is important to try and find equivalent options\nStudents may switch their software choice halfway through, if they feel they made the “wrong” choice, doubling the amount of time the assignment takes and causing frustration"
  },
  {
    "objectID": "presentation/presentation.html#sec-both-ways",
    "href": "presentation/presentation.html#sec-both-ways",
    "title": "When and How to Introduce Students to Free and Open-Source Software",
    "section": "4.3 Option 2: A Shorter Assignment, Both Ways",
    "text": "4.3 Option 2: A Shorter Assignment, Both Ways\nSteps\n\nThink of an assignment you already give to your class in which you recommend/suggest/require a proprietary software\nRewrite and shorten assignment instruction to allow for use of the proprietary and the open-source software alternative. Very important to emphasize what purpose doing the same assignment twice serves.\nHave students progress through the same assignment twice, demonstrating the same skills across both software platforms, and ensuring they get equivalent results across the two\n\nPresenter Example\n\nStudents need to record a short introduction (to themselves) video in a class in which they will have to do multiple recording presentations. They are asked to record once using Panopto (Proprietary) and Open Broadcasting Software (OBS; FOSS)\nFor both options I:\n\nProvide a video that shows navigating and recording a video with the selected program\nShow how both produce the same looking and sounding video, but require different steps to configure and set up\n\nFor both options, students must:\n\nRecord an equivalent video, producing the same outcome in quality of work, regardless of program choice\n\n\nBenefits\n\nStrongly reinforces the idea of different method/software, same outcome\nHelps students appreciate learning objectives as being accomplish-able through multiple ways, avoiding a “one-track” mindset\n\nDrawbacks\n\nMay easily be grating and boring to students if assignment is too long and feels like too much work to do twice\nStudents may not see value in multiple method approach unless this is explicitly explained when introducing assignment"
  },
  {
    "objectID": "presentation/presentation.html#sec-scav-hunt",
    "href": "presentation/presentation.html#sec-scav-hunt",
    "title": "When and How to Introduce Students to Free and Open-Source Software",
    "section": "4.4 Option 3: Scavenger Hunt for Equivalent (or Different) Features",
    "text": "4.4 Option 3: Scavenger Hunt for Equivalent (or Different) Features\nSteps\n\nThis works best if used later in the course after students have already established reasonable competence with a proprietary program\nThink of a set of simple practices / skills that exist as part of the proprietary software program that your students already know how to do. E.g., how to crop a photo, how to find a mean, etc.\nEncourage students to explore a similar, equivalent open-source program and determine how to accomplish those same tasks - encourage use of Google, ChatGPT (within reason), and documentation to find. Have them take screenshots showing them “finding” the features in the open source program.\n(Optional) Ask for evidence of a simple demonstration of those found features\n(Optional) Have them find a feature present in one software, but NOT the other\n\nPresenter Example\n\nIn a formula-heavy class, students are primarily use to hand-writing or using formula functions built-into MS Word or Google Docs, but I would like them to practice writing formulas in \nI request that students find the correct notation for writing common formula notation like superscripts, subscripts, fractions, summations, etc.\nI have them send me links to the resources they used and write out some simple examples of formulas in , using the advice from those resources\n\nBenefits\n\nEncourages autonomy in students to find and use resources, even when not directly provided by instructor\nStresses problem-solving, savvy searching, and application of solutions\nUses their established competence in one program to help connect to a new program\nWith optional step 5, may help students understand relative limitations of certain software choices\n\nDrawbacks\n\nStudents must feel competent in completing these practices already, otherwise may feel like they are trying to learn tech and concepts at the same time, which may be overwhelming\nDepending on student background, the instructor may have to provide some hints as to where to look to find solutions - some students may find the “scavenging” part to be unsupported by the instructor (even if that is intentional!)\n\nImportant: There are several routes to integration of open-source tools, but all focus on flexibility and agency!"
  },
  {
    "objectID": "presentation/presentation.html#sec-recap",
    "href": "presentation/presentation.html#sec-recap",
    "title": "When and How to Introduce Students to Free and Open-Source Software",
    "section": "5.1 Recap",
    "text": "5.1 Recap\n\nThere are many reasons we should be conscious around what software we use, demonstrate, and require in instruction, especially with the growing cost and monopoly certain tools\nFOSS software can, and sometimes should, be considered as an alternative when training students for practical work - it may also offer an opportunity to practice soft problem-solving and adaptation skills vital for the workplace\nExposure and experience is key: we don’t necessarily need to persuade students of a certain method of using software, so much as we should help them explore their options, for both now, and in the future"
  },
  {
    "objectID": "presentation/presentation.html#sec-parting-msg",
    "href": "presentation/presentation.html#sec-parting-msg",
    "title": "When and How to Introduce Students to Free and Open-Source Software",
    "section": "5.2 Parting Message",
    "text": "5.2 Parting Message\n\nContinue using the resources and links provided throughout this presentation to explore the complexity around adopting more open-source software\nIf you are an instructor: consider trialing an adoption of open-source tools, like one of my Examples of Integration, in your classrooms or, maybe even in your own workflow\nIf you are administrative or support staff, make sure that instructors are aware of alternative options to the most popular tools.\nThere is more to consider that we didn’t even cover today, like possible transparency, reproducability, and security benefits that may come with adoption of open-source software. Consider looking into these topics further!\nEncourage students to engage fruitfully with software not purely as a means-to-an-end, but as a conscious and adaptive choice - share with them some ideas present in this presentation!"
  },
  {
    "objectID": "presentation/presentation.html#sec-talk-with-me",
    "href": "presentation/presentation.html#sec-talk-with-me",
    "title": "When and How to Introduce Students to Free and Open-Source Software",
    "section": "5.3 Follow-Up",
    "text": "5.3 Follow-Up\n\nThanks for joining me today!\nIf you want to stay in-touch and talk more, send me an email at QuagliaQ@gvsu.edu, or catch me after the presentation!"
  },
  {
    "objectID": "presentation/presentation.html#sec-refs",
    "href": "presentation/presentation.html#sec-refs",
    "title": "When and How to Introduce Students to Free and Open-Source Software",
    "section": "5.4 References",
    "text": "5.4 References\n\n\nAllaire, J., & Dervieux, C. (2025). Quarto: R interface to quarto markdown publishing system. https://github.com/quarto-dev/quarto-r\n\n\nR Core Team. (2025). R: A language and environment for statistical computing. R Foundation for Statistical Computing. https://www.R-project.org/\n\n\nXie, Y. (2014). Knitr: A comprehensive tool for reproducible research in R. In V. Stodden, F. Leisch, & R. D. Peng (Eds.), Implementing reproducible computational research. Chapman; Hall/CRC.\n\n\nXie, Y. (2015). Dynamic documents with R and knitr (2nd ed.). Chapman; Hall/CRC. https://yihui.org/knitr/\n\n\nXie, Y. (2025). Knitr: A general-purpose package for dynamic report generation in r. https://yihui.org/knitr/\n\n\n\n\n\n\n\n\n\n \n\n\nWhen and How to Introduce Students to Free and Open-Source Software"
  }
]